/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type {
  LimitOrderTest,
  LimitOrderTestInterface,
} from "../LimitOrderTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "OrderFilled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "fillLimitOrder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060fc8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636ee247b414602d575b600080fd5b603c60383660046087565b603e565b005b60408051838152602081018390526001600160a01b038516917f8da998a3cae2c155d59a1bdac9b6d26464fd268a145a9ef658307a6f0a92b4e6910160405180910390a2505050565b600080600060608486031215609b57600080fd5b83356001600160a01b038116811460b157600080fd5b9560208501359550604090940135939250505056fea26469706673582212202baafe0ca99c293cf902bee859c38a7e6ea1c55892140a81d2eaec0683a1f71b64736f6c63430008140033";

type LimitOrderTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LimitOrderTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LimitOrderTest__factory extends ContractFactory {
  constructor(...args: LimitOrderTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LimitOrderTest> {
    return super.deploy(overrides || {}) as Promise<LimitOrderTest>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LimitOrderTest {
    return super.attach(address) as LimitOrderTest;
  }
  override connect(signer: Signer): LimitOrderTest__factory {
    return super.connect(signer) as LimitOrderTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LimitOrderTestInterface {
    return new utils.Interface(_abi) as LimitOrderTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LimitOrderTest {
    return new Contract(address, _abi, signerOrProvider) as LimitOrderTest;
  }
}
