/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  PermitAndCall,
  PermitAndCallInterface,
} from "../../../../../@1inch/solidity-utils/contracts/mixins/PermitAndCall";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "permit",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "action",
        type: "bytes",
      },
    ],
    name: "permitAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class PermitAndCall__factory {
  static readonly abi = _abi;
  static createInterface(): PermitAndCallInterface {
    return new Interface(_abi) as PermitAndCallInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PermitAndCall {
    return new Contract(address, _abi, runner) as unknown as PermitAndCall;
  }
}
