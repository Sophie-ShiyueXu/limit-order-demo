/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  PriorityFeeLimiter,
  PriorityFeeLimiterInterface,
} from "../../../../contracts/extensions/PrioirityFeeLimiter.sol/PriorityFeeLimiter";

const _abi = [
  {
    inputs: [],
    name: "isPriorityFeeValid",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100155760c0908161001b8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c630202470814602857600080fd5b3460455781600319360112604557602090603f6049565b15158152f35b5080fd5b483a03640277cf2a0048106000146067576064604648029102111590565b64183cd7f100481015607d57489060011b111590565b606460414802910211159056fea264697066735822122049a12e031c023ff1a8257c2a3e69b589db7d0abb1f155a0e2c84678ef3290d6964736f6c63430008170033";

type PriorityFeeLimiterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PriorityFeeLimiterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PriorityFeeLimiter__factory extends ContractFactory {
  constructor(...args: PriorityFeeLimiterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      PriorityFeeLimiter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PriorityFeeLimiter__factory {
    return super.connect(runner) as PriorityFeeLimiter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PriorityFeeLimiterInterface {
    return new Interface(_abi) as PriorityFeeLimiterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PriorityFeeLimiter {
    return new Contract(address, _abi, runner) as unknown as PriorityFeeLimiter;
  }
}
