/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Permit2WitnessProxy,
  Permit2WitnessProxyInterface,
} from "../../../contracts/extensions/Permit2WitnessProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_immutableOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "IOAccessDenied",
    type: "error",
  },
  {
    inputs: [],
    name: "Permit2WitnessProxyBadSelector",
    type: "error",
  },
  {
    inputs: [],
    name: "IMMUTABLE_OWNER",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct IPermit2WitnessTransferFrom.TokenPermissions",
            name: "permitted",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "deadline",
            type: "uint256",
          },
        ],
        internalType: "struct IPermit2WitnessTransferFrom.PermitTransferFrom",
        name: "permit",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "witness",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "func_801zDya",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461007057601f61046038819003918201601f19168301916001600160401b038311848410176100755780849260209460405283398101031261007057516001600160a01b0381168103610070576080526040516103d4908161008c8239608051818181604c01526101100152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c90816323b872dd1461007e575063f3d1372f1461003757600080fd5b3461007b578060031936011261007b576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b80fd5b90503461039a5761012036600319011261039a57600435906001600160a01b0382168203610396576024356001600160a01b0381169290839003610392576080366063190112610392576101049167ffffffffffffffff83351161036b57366023843501121561036b5767ffffffffffffffff8335600401351161036b57366024843560040135853501011161036b577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036103835750604051926040840184811067ffffffffffffffff82111761036f5760405283526044356020840152604051906080820182811067ffffffffffffffff82111761036f57604052605382527f5769746e657373207769746e65737329546f6b656e5065726d697373696f6e7360208301527f286164647265737320746f6b656e2c75696e7432353620616d6f756e74295769604083015272746e65737328627974657333322073616c742960681b60608301526e22d473030f116ddee9f6b43ac78ba33b1561036b576040516309be14ff60e11b815293606435906001600160a01b03821682036103675791602087959387959360018060a01b03166004870152608435602487015260a435604487015260c435606487015260018060a01b038151166084870152015160a485015260018060a01b031660c484015260e43560e48401526101408284015280519081610144850152845b82811061034b5750508290601f6101649186838286010152811991829101168301916101608484030161012485015284356004013590830152601f6101849480356004013560248235018786013735600401358381018601889052011601030181836e22d473030f116ddee9f6b43ac78ba35af1801561034057610317575080f35b67ffffffffffffffff811161032c5760405280f35b634e487b7160e01b82526041600452602482fd5b6040513d84823e3d90fd5b6020818301810151610164898401015288965087955001610295565b8680fd5b8480fd5b634e487b7160e01b86526041600452602486fd5b63497131ed60e01b8152600490fd5b8380fd5b8280fd5b5080fdfea2646970667358221220fb750a10142aceae9f50548235ac7fe3f842b4174a2e545fa206d8042fed624464736f6c63430008170033";

type Permit2WitnessProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Permit2WitnessProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Permit2WitnessProxy__factory extends ContractFactory {
  constructor(...args: Permit2WitnessProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _immutableOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_immutableOwner, overrides || {});
  }
  override deploy(
    _immutableOwner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_immutableOwner, overrides || {}) as Promise<
      Permit2WitnessProxy & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): Permit2WitnessProxy__factory {
    return super.connect(runner) as Permit2WitnessProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Permit2WitnessProxyInterface {
    return new Interface(_abi) as Permit2WitnessProxyInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): Permit2WitnessProxy {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as Permit2WitnessProxy;
  }
}
