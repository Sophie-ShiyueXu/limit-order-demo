/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DutchAuctionCalculator,
  DutchAuctionCalculatorInterface,
} from "../../../contracts/extensions/DutchAuctionCalculator";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "maker",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "receiver",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "makerAsset",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "takerAsset",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256",
          },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "takingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "getMakingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "maker",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "receiver",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "makerAsset",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "takerAsset",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256",
          },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "makingAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "extraData",
        type: "bytes",
      },
    ],
    name: "getTakingAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576102b3908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80631d9671c3146100a95763d7ff8a801461003357600080fd5b346100a65761005f60a061006a61006561004c36610123565b94509450509594989350508101906101a2565b91610213565b6101bd565b9101359182156100945750600161008760209360001984016101e6565b0190151502604051908152f35b634e487b71905260126020526024601cfd5b80fd5b50346100a65760206100e861005f6100e36100db60a06100c836610123565b94509450509694989350508101906101a2565b9301356101bd565b6101e6565b604051908152f35b9181601f8401121561011e5782359167ffffffffffffffff831161011e576020838186019501011161011e57565b600080fd5b9060031982016101c0811261011e576101001361011e5760049167ffffffffffffffff906101043582811161011e578161015f916004016100f0565b909390926101243592610144356001600160a01b038116810361011e5792610164359261018435926101a43591821161011e5761019e916004016100f0565b9091565b9081606091031261011e578035916040602083013592013590565b818102929181159184041417156101d057565b634e487b7160e01b600052601160045260246000fd5b81156101f0570490565b634e487b7160e01b600052601260045260246000fd5b919082039182116101d057565b9161025e6fffffffffffffffffffffffffffffffff8460801c941691610252856102584286104287180242188083118184180218966102528888610206565b906101bd565b95610206565b82018092116101d05761027a9261027491610206565b906101e6565b9056fea26469706673582212202ea4f5cee366b8868cecca05c02dbbfc2247fe58f6bc0012548e259a90e8c6c264736f6c63430008170033";

type DutchAuctionCalculatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DutchAuctionCalculatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DutchAuctionCalculator__factory extends ContractFactory {
  constructor(...args: DutchAuctionCalculatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DutchAuctionCalculator & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): DutchAuctionCalculator__factory {
    return super.connect(runner) as DutchAuctionCalculator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DutchAuctionCalculatorInterface {
    return new Interface(_abi) as DutchAuctionCalculatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DutchAuctionCalculator {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as DutchAuctionCalculator;
  }
}
