/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { OrderLib, OrderLibInterface } from "../../contracts/OrderLib";

const _abi = [
  {
    inputs: [],
    name: "InvalidExtensionHash",
    type: "error",
  },
  {
    inputs: [],
    name: "MissingOrderExtension",
    type: "error",
  },
  {
    inputs: [],
    name: "UnexpectedOrderExtension",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220f80361f7bc732798727f265b54c5d92a53aa0fcb81661ada951e41de89c6ed9764736f6c63430008170033";

type OrderLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OrderLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OrderLib__factory extends ContractFactory {
  constructor(...args: OrderLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      OrderLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): OrderLib__factory {
    return super.connect(runner) as OrderLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OrderLibInterface {
    return new Interface(_abi) as OrderLibInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): OrderLib {
    return new Contract(address, _abi, runner) as unknown as OrderLib;
  }
}
