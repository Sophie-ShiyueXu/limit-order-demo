/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RemainingInvalidatorLib,
  RemainingInvalidatorLibInterface,
} from "../../../contracts/libraries/RemainingInvalidatorLib";

const _abi = [
  {
    inputs: [],
    name: "RemainingInvalidatedOrder",
    type: "error",
  },
] as const;

const _bytecode =
  "0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea2646970667358221220fd64bca3aedc6e763b72cc3c6bf7168ce8e85f956a371ae6c0f0181824b3524764736f6c63430008170033";

type RemainingInvalidatorLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RemainingInvalidatorLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RemainingInvalidatorLib__factory extends ContractFactory {
  constructor(...args: RemainingInvalidatorLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RemainingInvalidatorLib & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RemainingInvalidatorLib__factory {
    return super.connect(runner) as RemainingInvalidatorLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RemainingInvalidatorLibInterface {
    return new Interface(_abi) as RemainingInvalidatorLibInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RemainingInvalidatorLib {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RemainingInvalidatorLib;
  }
}
