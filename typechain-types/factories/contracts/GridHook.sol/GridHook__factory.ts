/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  GridHook,
  GridHookInterface,
} from "../../../contracts/GridHook.sol/GridHook";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "lowerBound",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "upperBound",
        type: "int256",
      },
    ],
    name: "PriceNotInRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "preInteraction",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576101be908161001c8239f35b600080fdfe60808060405260048036101561001457600080fd5b600091823560e01c635d8b0f841461002b57600080fd5b34610184576060366003190112610184576001600160a01b03908235828116036101805760243582811603610180576044359067ffffffffffffffff908183116101785736602384011215610178578285013582811161017c57830136602482011161017c5783606091031261017857602483013593841680940361017857602081868160646044880135970135976350d25bcd60e01b82525afa91821561016d578692610112575b50508181128015610109575b6100e8578480f35b604051631eb3e29560e11b8152938401526024830152604482015260649150fd5b508281136100e0565b9091506020903d602011610165575b601f8201601f19168301908111838210176101525760209183916040528101031261014e575138806100d4565b8480fd5b634e487b7160e01b875260418652602487fd5b3d9150610121565b6040513d88823e3d90fd5b8580fd5b8680fd5b8380fd5b8280fdfea264697066735822122042011c699d3d8acf5fe4f5083e135adebd871f18271345544bd40d97d76f678964736f6c63430008170033";

type GridHookConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GridHookConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GridHook__factory extends ContractFactory {
  constructor(...args: GridHookConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      GridHook & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): GridHook__factory {
    return super.connect(runner) as GridHook__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GridHookInterface {
    return new Interface(_abi) as GridHookInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): GridHook {
    return new Contract(address, _abi, runner) as unknown as GridHook;
  }
}
