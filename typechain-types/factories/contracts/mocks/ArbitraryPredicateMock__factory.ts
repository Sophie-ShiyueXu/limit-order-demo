/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArbitraryPredicateMock,
  ArbitraryPredicateMockInterface,
} from "../../../contracts/mocks/ArbitraryPredicateMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arg",
        type: "uint256",
      },
    ],
    name: "copyArg",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234601457607a908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c631ae4f1b614602657600080fd5b34603f576020366003190112603f576020906004358152f35b600080fdfea2646970667358221220e5a31720399415ab60c727a98493e29064f58487b404450224bf568f28f505fc64736f6c63430008170033";

type ArbitraryPredicateMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArbitraryPredicateMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArbitraryPredicateMock__factory extends ContractFactory {
  constructor(...args: ArbitraryPredicateMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArbitraryPredicateMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): ArbitraryPredicateMock__factory {
    return super.connect(runner) as ArbitraryPredicateMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArbitraryPredicateMockInterface {
    return new Interface(_abi) as ArbitraryPredicateMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ArbitraryPredicateMock {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as ArbitraryPredicateMock;
  }
}
