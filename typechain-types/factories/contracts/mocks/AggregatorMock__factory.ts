/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AggregatorMock,
  AggregatorMockInterface,
} from "../../../contracts/mocks/AggregatorMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "NoDataPresent",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "int256",
        name: "current",
        type: "int256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
    ],
    name: "AnswerUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "startedBy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
    ],
    name: "NewRound",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "roundId",
        type: "uint256",
      },
    ],
    name: "getTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestAnswer",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRound",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461006857601f61041638819003918201601f19168301916001600160401b0383118484101761006d5780849260209460405283398101031261006857516080526040516103929081610084823960805181818161014a015281816102c001526103350152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263313ce567146102e35750816350d25bcd146102a857816354fd4d501461028c578163668a0f02146102715781637284e416146101c55781638205bf6a146101a85781639a6fc8f51461016d578163b5ab58dc1461012a578163b633620c146100ef575063feaf968c1461009357600080fd5b346100eb57816003193601126100eb576100e7906100af610323565b945169ffffffffffffffffffff94851681526020810193909352604083019190915260608201529116608082015290819060a0820190565b0390f35b5080fd5b8284346101275760203660031901126101275750813561011b576020906101146102fe565b9051908152f35b5162bb258760e81b8152fd5b80fd5b8284346101275760203660031901126101275750813561011b57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8284346101275760203660031901126101275782359069ffffffffffffffffffff8216809203610127575061011b576100e7906100af610323565b5050346100eb57816003193601126100eb576020906101146102fe565b90503461026d578260031936011261026d578151908282019082821067ffffffffffffffff83111761025a57508252600e81526020906d41676772656761746f724d6f636b60901b6020820152825193849260208452825192836020860152825b84811061024457505050828201840152601f01601f19168101030190f35b8181018301518882018801528795508201610226565b634e487b7160e01b855260419052602484fd5b8280fd5b5050346100eb57816003193601126100eb5751908152602090f35b5050346100eb57816003193601126100eb576020905160018152f35b5050346100eb57816003193601126100eb57602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b8490346100eb57816003193601126100eb5780601260209252f35b606319420142811161030d5790565b634e487b7160e01b600052601160045260246000fd5b60631942019042821161030d576000917f000000000000000000000000000000000000000000000000000000000000000091819060009056fea2646970667358221220a46373dc276fa7425c5f0025b16ed13c1a258dbb127d48c788c58b3c57c10b2c64736f6c63430008170033";

type AggregatorMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorMock__factory extends ContractFactory {
  constructor(...args: AggregatorMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    answer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(answer, overrides || {});
  }
  override deploy(
    answer: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(answer, overrides || {}) as Promise<
      AggregatorMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AggregatorMock__factory {
    return super.connect(runner) as AggregatorMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorMockInterface {
    return new Interface(_abi) as AggregatorMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AggregatorMock {
    return new Contract(address, _abi, runner) as unknown as AggregatorMock;
  }
}
