/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ExtensionMock,
  ExtensionMockInterface,
} from "../../../contracts/mocks/ExtensionMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "extension",
        type: "bytes",
      },
    ],
    name: "getCustomData",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100165761010e908161001c8239f35b600080fdfe6080806040526004361015601257600080fd5b6000803560e01c63d0cfe3ab14602757600080fd5b3460a057602036600319011260a05767ffffffffffffffff600435818111609c5736602382011215609c578060040135918211609c573660248383010111609c57916077849260246040950160a3565b8092916020855281602086015285850137828201840152601f01601f19168101030190f35b8280fd5b80fd5b91906020811060cf57823560e01c9281846020011160ca578301602001929003601f190190565b600080fd5b5060009150819056fea2646970667358221220c0f1659be87a5a3e7d9482b64b4a33aa1cc19d9e35f7fc8a8477607a3701860364736f6c63430008170033";

type ExtensionMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ExtensionMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ExtensionMock__factory extends ContractFactory {
  constructor(...args: ExtensionMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ExtensionMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ExtensionMock__factory {
    return super.connect(runner) as ExtensionMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ExtensionMockInterface {
    return new Interface(_abi) as ExtensionMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExtensionMock {
    return new Contract(address, _abi, runner) as unknown as ExtensionMock;
  }
}
