/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TakerContract,
  TakerContractInterface,
} from "../../../contracts/mocks/TakerContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IOrderMixin",
        name: "swap",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "maker",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "receiver",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "makerAsset",
            type: "uint256",
          },
          {
            internalType: "Address",
            name: "takerAsset",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "makingAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "takingAmount",
            type: "uint256",
          },
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256",
          },
        ],
        internalType: "struct IOrderMixin.Order",
        name: "order",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "vs",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "TakerTraits",
        name: "takerTraits",
        type: "uint256",
      },
    ],
    name: "fillOrder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a03461006957601f61021438819003918201601f19168301916001600160401b0383118484101761006e5780849260209460405283398101031261006957516001600160a01b03811681036100695760805260405161018f908161008582396080518160c10152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b600090813560e01c639fda64bd1461002a57600080fd5b366003190161018081126101555761010013610151576101046101246101449061016492639fda64bd60e01b85526004356004860152602435602486015260443560448601526064356064860152608435608486015260a43560a486015260c43560c486015260e43560e4860152803590850152803590840152803590830152803590820152606081610184813460018060a01b037f0000000000000000000000000000000000000000000000000000000000000000165af18015610146576100f1575080f35b60603d60601161013f575b601f19601f820116820167ffffffffffffffff83821091111761012b5790606091810103126101285780f35b80fd5b634e487b7160e01b83526041600452602483fd5b503d6100fc565b6040513d84823e3d90fd5b5080fd5b8280fdfea264697066735822122006af61363a600757bcedf6d4d562a3b29806f2b2629ae858aa6a2952850e301364736f6c63430008170033";

type TakerContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TakerContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TakerContract__factory extends ContractFactory {
  constructor(...args: TakerContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    swap: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(swap, overrides || {});
  }
  override deploy(
    swap: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(swap, overrides || {}) as Promise<
      TakerContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TakerContract__factory {
    return super.connect(runner) as TakerContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TakerContractInterface {
    return new Interface(_abi) as TakerContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TakerContract {
    return new Contract(address, _abi, runner) as unknown as TakerContract;
  }
}
