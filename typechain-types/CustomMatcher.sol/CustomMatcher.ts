/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface CustomMatcherInterface extends utils.Interface {
  functions: {
    "fillOrderWithHook(bytes,bytes,uint256,bytes)": FunctionFragment;
    "hookContract()": FunctionFragment;
    "limitOrderProtocol()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "fillOrderWithHook"
      | "hookContract"
      | "limitOrderProtocol"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "fillOrderWithHook",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hookContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitOrderProtocol",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "fillOrderWithHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hookContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitOrderProtocol",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CustomMatcher extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CustomMatcherInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    fillOrderWithHook(
      order: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      interactionData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hookContract(overrides?: CallOverrides): Promise<[string]>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<[string]>;
  };

  fillOrderWithHook(
    order: PromiseOrValue<BytesLike>,
    signature: PromiseOrValue<BytesLike>,
    makingAmount: PromiseOrValue<BigNumberish>,
    interactionData: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hookContract(overrides?: CallOverrides): Promise<string>;

  limitOrderProtocol(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    fillOrderWithHook(
      order: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      interactionData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    hookContract(overrides?: CallOverrides): Promise<string>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    fillOrderWithHook(
      order: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      interactionData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hookContract(overrides?: CallOverrides): Promise<BigNumber>;

    limitOrderProtocol(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    fillOrderWithHook(
      order: PromiseOrValue<BytesLike>,
      signature: PromiseOrValue<BytesLike>,
      makingAmount: PromiseOrValue<BigNumberish>,
      interactionData: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hookContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitOrderProtocol(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
