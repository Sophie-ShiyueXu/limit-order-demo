import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { TokenMock, TokenMockInterface } from "../../../contracts/mocks/TokenMock";
type TokenMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TokenMock__factory extends ContractFactory {
    constructor(...args: TokenMockConstructorParams);
    getDeployTransaction(name: string, symbol: string, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(name: string, symbol: string, overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<TokenMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): TokenMock__factory;
    static readonly bytecode = "0x60806040523461033657611243803803806100198161033a565b9283398101906040818303126103365780516001600160401b0390818111610336578361004791840161035f565b916020938482015183811161033657610060920161035f565b825182811161024d576003918254916001958684811c9416801561032c575b88851014610318578190601f948581116102ca575b50889085831160011461026c575f92610261575b50505f1982861b1c191690861b1783555b805193841161024d5760049586548681811c91168015610243575b82821014610230578381116101ed575b508092851160011461018857509383949184925f9561017d575b50501b925f19911b1c19161781555b33156101665760058054336001600160a01b03198216811790925560405191906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3610e9290816103b18239f35b6024905f60405191631e4fbdf760e01b8352820152fd5b015193505f806100fe565b92919084601f198116885f52855f20955f905b898383106101d357505050106101ba575b50505050811b01815561010d565b01519060f8845f19921b161c191690555f8080806101ac565b85870151895590970196948501948893509081019061019b565b875f52815f208480880160051c820192848910610227575b0160051c019087905b82811061021c5750506100e4565b5f815501879061020e565b92508192610205565b602288634e487b7160e01b5f525260245ffd5b90607f16906100d4565b634e487b7160e01b5f52604160045260245ffd5b015190505f806100a8565b90889350601f19831691875f528a5f20925f5b8c8282106102b4575050841161029d575b505050811b0183556100b9565b01515f1983881b60f8161c191690555f8080610290565b8385015186558c9790950194938401930161027f565b909150855f52885f208580850160051c8201928b861061030f575b918a91869594930160051c01915b828110610301575050610094565b5f81558594508a91016102f3565b925081926102e5565b634e487b7160e01b5f52602260045260245ffd5b93607f169361007f565b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761024d57604052565b81601f82011215610336578051906001600160401b03821161024d5761038e601f8301601f191660200161033a565b928284526020838301011161033657815f9260208093018386015e830101529056fe608060409080825260049081361015610016575f80fd5b5f3560e01c90816306fdde0314610afe57508063095ea7b3146109f857806318160ddd146109bc57806323b872dd14610835578063313ce567146107fc57806340c10f19146106f157806370a0823114610690578063715018a6146105f45780638da5cb5b146105a257806395d89b41146103aa5780639dc29fac14610263578063a9059cbb14610215578063dd62ed3e146101a05763f2fde38b146100ba575f80fd5b3461019c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576100f1610c88565b906100fa610e0b565b73ffffffffffffffffffffffffffffffffffffffff80921692831561016d575050600554827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b905f60249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b5f80fd5b823461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020906101da610c88565b6101e2610cab565b9073ffffffffffffffffffffffffffffffffffffffff8091165f5260018452825f2091165f528252805f20549051908152f35b823461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209061025c610252610c88565b6024359033610cce565b5160018152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761029b610c88565b90602435926102a8610e0b565b73ffffffffffffffffffffffffffffffffffffffff831692831561037b57835f525f602052825f20549185831061031c575f857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020898881898688528785520381872055816002540360025551908152a3005b610377868486519485947fe450d38c000000000000000000000000000000000000000000000000000000008652850160409194939273ffffffffffffffffffffffffffffffffffffffff606083019616825260208201520152565b0390fd5b505f60249251917f96c6fd1e000000000000000000000000000000000000000000000000000000008352820152fd5b503461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5781515f928254936001948060011c60018216968715610598575b602092838310891461056c57869798838897985290815f146105115750600114610496575b50505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761046a5750829182610466925282610c40565b0390f35b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f888152929493507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106104fb57505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610418565b80548885018701528794509285019281016104c0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016848701525050151560051b830101905081601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610418565b6022887f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b90607f16906103f3565b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209073ffffffffffffffffffffffffffffffffffffffff600554169051908152f35b3461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761062a610e0b565b5f73ffffffffffffffffffffffffffffffffffffffff6005547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b823461019c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5760209073ffffffffffffffffffffffffffffffffffffffff6106e0610c88565b165f525f8252805f20549051908152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c57610729610c88565b9073ffffffffffffffffffffffffffffffffffffffff6024359261074b610e0b565b169283156107ce57600254908382018092116107a257505f927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9260209260025585855284835280852082815401905551908152a3005b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5f60249251917fec442f05000000000000000000000000000000000000000000000000000000008352820152fd5b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020905160128152f35b503461019c5760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c5761086d610c88565b610875610cab565b906044359273ffffffffffffffffffffffffffffffffffffffff8216805f526001602052855f20335f52602052855f2054917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83036108dd575b60208761025c888888610cce565b85831061097757811561094857331561091957505f9081526001602090815286822033835281529086902091859003909155829061025c6108cf565b6024905f8851917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b6024905f8851917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b86517ffb8f41b2000000000000000000000000000000000000000000000000000000008152339181019182526020820193909352604081018690528291506060010390fd5b823461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c576020906002549051908152f35b50903461019c57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c57610a30610c88565b602435903315610acf5773ffffffffffffffffffffffffffffffffffffffff16908115610aa05760209350335f5260018452825f20825f52845280835f205582519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b6024845f8551917f94280d62000000000000000000000000000000000000000000000000000000008352820152fd5b6024845f8551917fe602df05000000000000000000000000000000000000000000000000000000008352820152fd5b90503461019c575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261019c575f92600354936001948060011c60018216968715610c36575b602092838310891461056c57869798838897985290815f146105115750600114610bb95750505003601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019267ffffffffffffffff84118385101761046a5750829182610466925282610c40565b60035f908152929493507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b828410610c2057505050907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe092601f92820101918193610418565b8054888501870152879450928501928101610be5565b90607f1690610b47565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361019c57565b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361019c57565b9173ffffffffffffffffffffffffffffffffffffffff808416928315610ddb5716928315610dab57825f525f60205260405f205490828210610d535750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92602092855f525f84520360405f2055845f5260405f20818154019055604051908152a3565b6040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff919091166004820152602481019190915260448101829052606490fd5b60246040517fec442f050000000000000000000000000000000000000000000000000000000081525f6004820152fd5b60246040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081525f6004820152fd5b73ffffffffffffffffffffffffffffffffffffffff600554163303610e2c57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea2646970667358221220c0186a0fb03ec16940ead8a145b5b2ef1f46cb4d51757cbca3d86550ca533fa164736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "name";
            readonly type: "string";
        }, {
            readonly internalType: "string";
            readonly name: "symbol";
            readonly type: "string";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "allowance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientAllowance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "balance";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "needed";
            readonly type: "uint256";
        }];
        readonly name: "ERC20InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "approver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidApprover";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "receiver";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidReceiver";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "ERC20InvalidSpender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "OwnableInvalidOwner";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "OwnableUnauthorizedAccount";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Approval";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "previousOwner";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "OwnershipTransferred";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "Transfer";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }];
        readonly name: "allowance";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "spender";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "approve";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }];
        readonly name: "balanceOf";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "burn";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "decimals";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "account";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }];
        readonly name: "mint";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "name";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "owner";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "renounceOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "symbol";
        readonly outputs: readonly [{
            readonly internalType: "string";
            readonly name: "";
            readonly type: "string";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "totalSupply";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transfer";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }];
        readonly name: "transferFrom";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "newOwner";
            readonly type: "address";
        }];
        readonly name: "transferOwnership";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TokenMockInterface;
    static connect(address: string, runner?: ContractRunner | null): TokenMock;
}
export {};
