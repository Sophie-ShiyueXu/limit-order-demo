import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { BySigTraits, BySigTraitsInterface } from "../../../contracts/libraries/BySigTraits";
type BySigTraitsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BySigTraits__factory extends ContractFactory {
    constructor(...args: BySigTraitsConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<BySigTraits & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): BySigTraits__factory;
    static readonly bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea26469706673582212207a1e7584828109d42af34284144b3da003bc43413a63aa9540b923578e9c518b64736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "WrongNonceType";
        readonly type: "error";
    }];
    static createInterface(): BySigTraitsInterface;
    static connect(address: string, runner?: ContractRunner | null): BySigTraits;
}
export {};
