import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { RevertReasonParser, RevertReasonParserInterface } from "../../../contracts/libraries/RevertReasonParser";
type RevertReasonParserConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RevertReasonParser__factory extends ContractFactory {
    constructor(...args: RevertReasonParserConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<RevertReasonParser & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): RevertReasonParser__factory;
    static readonly bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220dba9f6085d65e04a5187b68208328c58d1d46aa70793610563c18b773e1cc98964736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InvalidRevertReason";
        readonly type: "error";
    }];
    static createInterface(): RevertReasonParserInterface;
    static connect(address: string, runner?: ContractRunner | null): RevertReasonParser;
}
export {};
