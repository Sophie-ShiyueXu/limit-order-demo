import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type { UniERC20, UniERC20Interface } from "../../../contracts/libraries/UniERC20";
type UniERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class UniERC20__factory extends ContractFactory {
    constructor(...args: UniERC20ConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<UniERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): UniERC20__factory;
    static readonly bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea2646970667358221220f0b31e4dcb53ac4ca20ccf87fa32089f049ea88f05641c4c9a0719a80361664e64736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ApproveCalledOnETH";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ETHTransferFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "FromIsNotSender";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientBalance";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotEnoughValue";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ToIsNotThis";
        readonly type: "error";
    }];
    static createInterface(): UniERC20Interface;
    static connect(address: string, runner?: ContractRunner | null): UniERC20;
}
export {};
