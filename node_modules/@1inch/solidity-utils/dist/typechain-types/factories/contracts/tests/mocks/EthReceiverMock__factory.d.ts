import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { EthReceiverMock, EthReceiverMockInterface } from "../../../../contracts/tests/mocks/EthReceiverMock";
type EthReceiverMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class EthReceiverMock__factory extends ContractFactory {
    constructor(...args: EthReceiverMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<EthReceiverMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): EthReceiverMock__factory;
    static readonly bytecode = "0x608080604052346013576074908160188239f35b5f80fdfe6080806040523615600e575f80fd5b323314601657005b807f1b10b0f90000000000000000000000000000000000000000000000000000000060049252fdfea264697066735822122017addcae27c7288e940dedda35fc4c5db09e62c3878c6ac883ba613072189c0e64736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "EthDepositRejected";
        readonly type: "error";
    }, {
        readonly stateMutability: "payable";
        readonly type: "receive";
    }];
    static createInterface(): EthReceiverMockInterface;
    static connect(address: string, runner?: ContractRunner | null): EthReceiverMock;
}
export {};
