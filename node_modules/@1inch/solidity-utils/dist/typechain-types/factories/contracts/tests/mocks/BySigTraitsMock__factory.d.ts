import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { BySigTraitsMock, BySigTraitsMockInterface } from "../../../../contracts/tests/mocks/BySigTraitsMock";
type BySigTraitsMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BySigTraitsMock__factory extends ContractFactory {
    constructor(...args: BySigTraitsMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<BySigTraitsMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): BySigTraitsMock__factory;
    static readonly bytecode = "0x60808060405234601557610240908161001a8239f35b5f80fdfe608060409080825260049081361015610016575f80fd5b5f3560e01c9081631941c38614610185575080639c7091c6146100df578063c40dc8ec1461009b5763ce03fdab1461004c575f80fd5b346100975760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610097576fffffffffffffffffffffffffffffffff602092519135168152f35b5f80fd5b50346100975760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100975764ffffffffff60209251913560d01c168152f35b5090346100975760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261009757813560fe1c906002821161015d576003821015610131576020925051908152f35b6021837f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b9050517f5f640821000000000000000000000000000000000000000000000000000000008152fd5b90508234610097577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100975760243573ffffffffffffffffffffffffffffffffffffffff811681036100975760209269ffffffffffffffffffff80913560801c169081159283156101fe575b50505015158152f35b161490508380806101f556fea2646970667358221220f87da6bd7532459cb34570564f79e6d7163e0ba0145c08e19184969f40db38d364736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "WrongNonceType";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "BySigTraits.Value";
            readonly name: "traits";
            readonly type: "uint256";
        }];
        readonly name: "deadline";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "BySigTraits.Value";
            readonly name: "traits";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "relayer";
            readonly type: "address";
        }];
        readonly name: "isRelayerAllowed";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "BySigTraits.Value";
            readonly name: "traits";
            readonly type: "uint256";
        }];
        readonly name: "nonce";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "BySigTraits.Value";
            readonly name: "traits";
            readonly type: "uint256";
        }];
        readonly name: "nonceType";
        readonly outputs: readonly [{
            readonly internalType: "enum BySigTraits.NonceType";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): BySigTraitsMockInterface;
    static connect(address: string, runner?: ContractRunner | null): BySigTraitsMock;
}
export {};
