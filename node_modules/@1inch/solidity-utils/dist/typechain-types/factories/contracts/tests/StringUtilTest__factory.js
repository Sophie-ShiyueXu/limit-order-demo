"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StringUtilTest__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "toHex",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "toHexBytes",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "value",
                type: "uint256",
            },
        ],
        name: "toHexNaive",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "toHexNaiveBytes",
        outputs: [
            {
                internalType: "string",
                name: "",
                type: "string",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
];
const _bytecode = "0x6080806040523460155761081e908161001a8239f35b5f80fdfe60806040908082526004361015610014575f80fd5b5f3560e01c908163643e3983146100e0575080639c7ef06a146100ca578063bf1792b3146100775763fdf919b01461004a575f80fd5b346100735761006f9061006461005f36610238565b6106d0565b90519182918261012c565b0390f35b5f80fd5b50346100735760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610073578061006461006f92516004356020820152602081526100c581610174565b6102be565b50346100735761006f906100646100c536610238565b82346100735760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100735761006461006f9260043560208201526020815261005f81610174565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b6040810190811067ffffffffffffffff82111761019057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761019057604052565b67ffffffffffffffff811161019057601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100735760043567ffffffffffffffff811161007357816023820112156100735780600401359061028e826101fe565b9261029c60405194856101bd565b8284526024838301011161007357815f92602460209301838601378301015290565b9060408051928051918260011b91600260228701936022818901016040526130788289015201865260208094818301920101925b838210610300575050505050565b82859161068584516104c6817f3030303030303030303030303030303030303030303030303030303030303030908060401c907fffffffff000000000000000000000000000000000000000000000000000000006fffffffff0000000000000000000000006bffffffff000000000000000084167bffffffff00000000000000000000000000000000000000000000000084161760201c9316911617178060101c907fff00000000000000ff00000000000000ff00000000000000ff000000000000007bff00000000000000ff00000000000000ff00000000000000ff0000007aff00000000000000ff00000000000000ff00000000000000ff000084167eff00000000000000ff00000000000000ff00000000000000ff00000000000084161760081c9316911617177f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f007e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f8260081c169160041c161760077f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f7f0606060606060606060606060606060606060606060606060606060606060606830160041c1602010190565b835260801b7f3030303030303030303030303030303030303030303030303030303030303030908060401c907fffffffff000000000000000000000000000000000000000000000000000000006fffffffff0000000000000000000000006bffffffff000000000000000084167bffffffff00000000000000000000000000000000000000000000000084161760201c9316911617178060101c907fff00000000000000ff00000000000000ff00000000000000ff000000000000007bff00000000000000ff00000000000000ff00000000000000ff0000007aff00000000000000ff00000000000000ff00000000000000ff000084167eff00000000000000ff00000000000000ff00000000000000ff00000000000084161760081c9316911617177f0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f007e0f000f000f000f000f000f000f000f000f000f000f000f000f000f000f000f8260081c169160041c161760077f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f7f0606060606060606060606060606060606060606060606060606060606060606830160041c1602010190565b83820152019101906102f2565b9081518110156106a3570160200190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b805160019060029060011b600201926107016106eb856101fe565b946106f960405196876101bd565b8086526101fe565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06020860191013682378451156106a357603090538351600110156106a3578291607860218601535f925b610758575b5050505090565b81518310156107e35761076b8383610692565b5160fc1c92601090818510156106a3577f3031323334353637383941424344454600000000000000000000000000000000948582881b911a6107af8583018a610692565b53600f6107bc8387610692565b5160f81c16928310156106a3576107db6003889788951a920189610692565b53019261074c565b61075156fea26469706673582212209f171c59e7671ad4cc7c374679ad6e1f4d6f53c4593c5257e6a1f815d1f3140864736f6c63430008190033";
const isSuperArgs = (xs) => xs.length > 1;
class StringUtilTest__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.StringUtilTest__factory = StringUtilTest__factory;
StringUtilTest__factory.bytecode = _bytecode;
StringUtilTest__factory.abi = _abi;
//# sourceMappingURL=StringUtilTest__factory.js.map