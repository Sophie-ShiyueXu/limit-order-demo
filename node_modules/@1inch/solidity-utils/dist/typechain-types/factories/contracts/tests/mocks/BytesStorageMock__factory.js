"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BytesStorageMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "OutOfBounds",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "setData",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "wrap",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "slot",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "offset",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesStorage.Slice",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "wrapAndCopy",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "size",
                type: "uint256",
            },
        ],
        name: "wrapAndSlice",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "slot",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "offset",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesStorage.Slice",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "size",
                type: "uint256",
            },
        ],
        name: "wrapWithSliceAndCopy",
        outputs: [
            {
                internalType: "bytes",
                name: "",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60808060405234601557610711908161001a8239f35b5f80fdfe604060808152600480361015610013575f80fd5b5f3560e01c908163538127cf146104575781637c46d72d1461042a57816399ebabc1146103dc578163ab62f0e1146100c5575063d46eb11914610054575f80fd5b346100c1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c1576100bd9061008e610542565b5061009761055c565b905191829182919091604080606083019480518452602081015160208501520151910152565b0390f35b5f80fd5b82346100c157602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c15780359267ffffffffffffffff928385116100c157366023860112156100c1576024838601358581116103b1577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09683519388603f81601f8601160116850190858210898311176103865752818452368383830101116100c157815f92848793018387013784010152815194851161035c575f54906001948583811c93168015610352575b85841014610328575050601f81116102c4575b5081601f851160011461022a575083945090839293915f936101ff575b50507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff91921b9260031b1c1916175f555f80f35b015191507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff856101cb565b9294849081165f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563945f905b888383106102aa5750505010610273575b505050811b015f55005b01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88460031b161c19169055828080610269565b858701518855909601959485019487935090810190610258565b5f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563601f860160051c81019184871061031e575b601f0160051c019084905b8281106103135750506101ae565b5f8155018490610305565b90915081906102fa565b6022907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b92607f169261019b565b6041847f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b846041897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b506041847f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b82346100c1575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100c1576100bd9061041f61041a61055c565b61067b565b9051918291826104ad565b82346100c1576100bd9061009761044036610479565b90610449610542565b5061045261055c565b6105f9565b82346100c1576100bd9061041f61041a61047036610479565b9061045261055c565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60409101126100c1576004359060243590565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b604051906060820182811067ffffffffffffffff82111761051557604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61054a6104f5565b905f82525f60208301525f6040830152565b610564610542565b505f5460018116156105b2575f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639060011c5b6105a16104f5565b9182525f6020830152604082015290565b607f5f9160011c16610599565b919082018092116105cc57565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9190610603610542565b5061060e82826105bf565b6040840151106106515761063761062b601f9260208601516105bf565b93518460051c906105bf565b926106406104f5565b938452166020830152604082015290565b60046040517fb4120f14000000000000000000000000000000000000000000000000000000008152fd5b90815160206040818501519401519080604051958184880101604052838752601f8183890195010160051c85019385548260031b1b905281038601016001809401905b8382106106cc575050505050565b815481529084019082016106be56fea2646970667358221220e7772e2da7b8cf67ae5041d4ec55994e21edefa2887955150ebcce1db4d26c3f64736f6c63430008190033";
const isSuperArgs = (xs) => xs.length > 1;
class BytesStorageMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.BytesStorageMock__factory = BytesStorageMock__factory;
BytesStorageMock__factory.bytecode = _bytecode;
BytesStorageMock__factory.abi = _abi;
//# sourceMappingURL=BytesStorageMock__factory.js.map