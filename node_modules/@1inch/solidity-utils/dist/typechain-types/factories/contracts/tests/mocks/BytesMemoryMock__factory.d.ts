import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { BytesMemoryMock, BytesMemoryMockInterface } from "../../../../contracts/tests/mocks/BytesMemoryMock";
type BytesMemoryMockConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class BytesMemoryMock__factory extends ContractFactory {
    constructor(...args: BytesMemoryMockConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<BytesMemoryMock & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): BytesMemoryMock__factory;
    static readonly bytecode = "0x608080604052346015576105ad908161001a8239f35b5f80fdfe6040608081526004361015610012575f80fd5b5f3560e01c8063328f3db8146101e85780633813b76b146101cf5780635e22a655146101b3578063a47ace4e1461011a578063c2d55993146100aa5763e7a20bd01461005c575f80fd5b346100a6576100a290610086610071366102f1565b5f602061007c610201565b82815201526104cf565b9051918291829190916020806040830194805184520151910152565b0390f35b5f80fd5b50346100a6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601608081126100a65781136100a6576100a2906100866100f0610201565b600435815260243560208201525f6020610108610201565b828152015260643590604435906104ed565b50346100a65760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a6576004359067ffffffffffffffff82116100a6576101a86101a361017e6101776100a2953690600401610396565b3691610292565b5f6020610189610201565b82815201526044359061019e602435916104cf565b6104ed565b610497565b90519182918261034e565b50346100a6576100a2906100866101c9366103c4565b9161042d565b50346100a6576100a2906101a86101a36101c9366103c4565b50346100a6576100a2906101a86101a3610071366102f1565b604051906040820182811067ffffffffffffffff82111761022157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761022157604052565b92919267ffffffffffffffff8211610221576102d560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160161024e565b93828552828201116100a657815f926020928387013784010152565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100a6576004359067ffffffffffffffff82116100a657806023830112156100a65781602461034b93600401359101610292565b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b9181601f840112156100a65782359167ffffffffffffffff83116100a657602083818601950101116100a657565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100a6576004359067ffffffffffffffff82116100a65761040d91600401610396565b909160243590565b67ffffffffffffffff81116102215760051b60200190565b6104929161034b935f6020610440610201565b82815201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061048361047a61047584610415565b61024e565b92808452610415565b01906020369101373691610292565b6104cf565b906020825192015160405192602082850101604052818452602082115f146104c65781602085019160045afa50565b51602084015250565b906104d8610201565b9160208301905f825283602082019052519052565b9291906104f8610201565b5f815260208101915f8352819584820180831161054a57602082015110610520575101905252565b60046040517fb4120f14000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea26469706673582212204906244f60d6fc179514d03e0d85bd0c740f5ea19c4253e9aebb91bab29e957c64736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "OutOfBounds";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "pointer";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "length";
                readonly type: "uint256";
            }];
            readonly internalType: "struct BytesMemory.Slice";
            readonly name: "data";
            readonly type: "tuple";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "slice";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "pointer";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "length";
                readonly type: "uint256";
            }];
            readonly internalType: "struct BytesMemory.Slice";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "wrap";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "pointer";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "length";
                readonly type: "uint256";
            }];
            readonly internalType: "struct BytesMemory.Slice";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "wrapAndUnwrap";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "ret";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "n";
            readonly type: "uint256";
        }];
        readonly name: "wrapWithNonDefaultPointer";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "pointer";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "length";
                readonly type: "uint256";
            }];
            readonly internalType: "struct BytesMemory.Slice";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "n";
            readonly type: "uint256";
        }];
        readonly name: "wrapWithNonDefaultPointerAndUnwrap";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "ret";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "offset";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "size";
            readonly type: "uint256";
        }];
        readonly name: "wrapWithSliceAndUnwrap";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "ret";
            readonly type: "bytes";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): BytesMemoryMockInterface;
    static connect(address: string, runner?: ContractRunner | null): BytesMemoryMock;
}
export {};
