"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BytesMemoryMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "OutOfBounds",
        type: "error",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "pointer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesMemory.Slice",
                name: "data",
                type: "tuple",
            },
            {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "size",
                type: "uint256",
            },
        ],
        name: "slice",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "pointer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesMemory.Slice",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "wrap",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "pointer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesMemory.Slice",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
        ],
        name: "wrapAndUnwrap",
        outputs: [
            {
                internalType: "bytes",
                name: "ret",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "uint256",
                name: "n",
                type: "uint256",
            },
        ],
        name: "wrapWithNonDefaultPointer",
        outputs: [
            {
                components: [
                    {
                        internalType: "uint256",
                        name: "pointer",
                        type: "uint256",
                    },
                    {
                        internalType: "uint256",
                        name: "length",
                        type: "uint256",
                    },
                ],
                internalType: "struct BytesMemory.Slice",
                name: "",
                type: "tuple",
            },
        ],
        stateMutability: "pure",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "uint256",
                name: "n",
                type: "uint256",
            },
        ],
        name: "wrapWithNonDefaultPointerAndUnwrap",
        outputs: [
            {
                internalType: "bytes",
                name: "ret",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "bytes",
                name: "data",
                type: "bytes",
            },
            {
                internalType: "uint256",
                name: "offset",
                type: "uint256",
            },
            {
                internalType: "uint256",
                name: "size",
                type: "uint256",
            },
        ],
        name: "wrapWithSliceAndUnwrap",
        outputs: [
            {
                internalType: "bytes",
                name: "ret",
                type: "bytes",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x608080604052346015576105ad908161001a8239f35b5f80fdfe6040608081526004361015610012575f80fd5b5f3560e01c8063328f3db8146101e85780633813b76b146101cf5780635e22a655146101b3578063a47ace4e1461011a578063c2d55993146100aa5763e7a20bd01461005c575f80fd5b346100a6576100a290610086610071366102f1565b5f602061007c610201565b82815201526104cf565b9051918291829190916020806040830194805184520151910152565b0390f35b5f80fd5b50346100a6577ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601608081126100a65781136100a6576100a2906100866100f0610201565b600435815260243560208201525f6020610108610201565b828152015260643590604435906104ed565b50346100a65760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126100a6576004359067ffffffffffffffff82116100a6576101a86101a361017e6101776100a2953690600401610396565b3691610292565b5f6020610189610201565b82815201526044359061019e602435916104cf565b6104ed565b610497565b90519182918261034e565b50346100a6576100a2906100866101c9366103c4565b9161042d565b50346100a6576100a2906101a86101a36101c9366103c4565b50346100a6576100a2906101a86101a3610071366102f1565b604051906040820182811067ffffffffffffffff82111761022157604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761022157604052565b92919267ffffffffffffffff8211610221576102d560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160161024e565b93828552828201116100a657815f926020928387013784010152565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100a6576004359067ffffffffffffffff82116100a657806023830112156100a65781602461034b93600401359101610292565b90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f602060409481855280519182918282880152018686015e5f8582860101520116010190565b9181601f840112156100a65782359167ffffffffffffffff83116100a657602083818601950101116100a657565b60407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc8201126100a6576004359067ffffffffffffffff82116100a65761040d91600401610396565b909160243590565b67ffffffffffffffff81116102215760051b60200190565b6104929161034b935f6020610440610201565b82815201527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe061048361047a61047584610415565b61024e565b92808452610415565b01906020369101373691610292565b6104cf565b906020825192015160405192602082850101604052818452602082115f146104c65781602085019160045afa50565b51602084015250565b906104d8610201565b9160208301905f825283602082019052519052565b9291906104f8610201565b5f815260208101915f8352819584820180831161054a57602082015110610520575101905252565b60046040517fb4120f14000000000000000000000000000000000000000000000000000000008152fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea26469706673582212204906244f60d6fc179514d03e0d85bd0c740f5ea19c4253e9aebb91bab29e957c64736f6c63430008190033";
const isSuperArgs = (xs) => xs.length > 1;
class BytesMemoryMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.BytesMemoryMock__factory = BytesMemoryMock__factory;
BytesMemoryMock__factory.bytecode = _bytecode;
BytesMemoryMock__factory.abi = _abi;
//# sourceMappingURL=BytesMemoryMock__factory.js.map