import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type { RevertReasonForwarderHelper, RevertReasonForwarderHelperInterface } from "../../../../../contracts/tests/mocks/RevertReasonForwarderMock.sol/RevertReasonForwarderHelper";
type RevertReasonForwarderHelperConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class RevertReasonForwarderHelper__factory extends ContractFactory {
    constructor(...args: RevertReasonForwarderHelperConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<RevertReasonForwarderHelper & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): RevertReasonForwarderHelper__factory;
    static readonly bytecode = "0x6080806040523460135760b1908160188239f35b5f80fdfe60808060405260043610156011575f80fd5b5f3560e01c635b2dd100146023575f80fd5b346077575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112607757807fd87229d90000000000000000000000000000000000000000000000000000000060049252fd5b5f80fdfea26469706673582212207281385542cf9dadb52c0787a69e60a21d2bca952c4b621ad9cc4b40ffa87d1d64736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "RevertReason";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "revertWithReason";
        readonly outputs: readonly [];
        readonly stateMutability: "pure";
        readonly type: "function";
    }];
    static createInterface(): RevertReasonForwarderHelperInterface;
    static connect(address: string, runner?: ContractRunner | null): RevertReasonForwarderHelper;
}
export {};
