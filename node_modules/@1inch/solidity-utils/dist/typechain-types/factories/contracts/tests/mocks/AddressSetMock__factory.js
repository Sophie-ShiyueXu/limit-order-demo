"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AddressSetMock__factory = void 0;
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
const ethers_1 = require("ethers");
const _abi = [
    {
        inputs: [],
        name: "IndexOutOfBounds",
        type: "error",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "item",
                type: "address",
            },
        ],
        name: "add",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "at",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "item",
                type: "address",
            },
        ],
        name: "contains",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "erase",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [],
        name: "get",
        outputs: [
            {
                internalType: "address[]",
                name: "",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address[]",
                name: "providedArr",
                type: "address[]",
            },
        ],
        name: "getAndProvideSet",
        outputs: [
            {
                internalType: "address[]",
                name: "",
                type: "address[]",
            },
            {
                internalType: "address[]",
                name: "",
                type: "address[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [],
        name: "length",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "item",
                type: "address",
            },
        ],
        name: "remove",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "uint256",
                name: "index",
                type: "uint256",
            },
        ],
        name: "unsafeAt",
        outputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
];
const _bytecode = "0x60808060405234601557610a18908161001a8239f35b5f80fdfe60406080815260049081361015610014575f80fd5b5f3560e01c8062f6b2b21461052c5780630a3b0a4f146104e95780630a7231ba146103065780631f7b6d32146102c257806329092d0e146102765780635dbe47e8146101d05780636d4ce63c1461017e578063e0886f90146101185763ec2fd5a11461007e575f80fd5b346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114578135916401000000008310156100ed575073ffffffffffffffffffffffffffffffffffffffff6100de6020936109a3565b92905490519260031b1c168152f35b90517f4e23d035000000000000000000000000000000000000000000000000000000008152fd5b5f80fd5b50346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114578135918263ffffffff5f5460a01c1611156100ed575073ffffffffffffffffffffffffffffffffffffffff6100de6020936109a3565b5034610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114576101cc906101b961092c565b905191829160208352602083019061064b565b0390f35b50346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145760209061023661020e610628565b73ffffffffffffffffffffffffffffffffffffffff165f5264010000000060205260405f2090565b5490811515918261024b575b50519015158152f35b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1415915083610242565b50346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114576020906102b96102b4610628565b61077a565b90519015158152f35b5034610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145760209063ffffffff5f5460a01c169051908152f35b5034610114576020807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145767ffffffffffffffff8335818111610114573660238201121561011457808501358281116104bd576005918160051b918651947fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f850116860190868210908211176104915787528452848401602481938301019136831161011457602401905b828210610465575050505f549063ffffffff8260a01c169173ffffffffffffffffffffffffffffffffffffffff978551841161043f57508261041a575b8651878152806101cc888861040d848d018261064b565b918483039085015261064b565b8716905260019160015b828110156103f6578054881681831b86018701528301610424565b7ff9a99b25000000000000000000000000000000000000000000000000000000005f525ffd5b813573ffffffffffffffffffffffffffffffffffffffff811681036101145781529086019086016103b9565b6041897f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6041867f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b50346101145760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610114576020906102b9610527610628565b610694565b8234610114575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101145761056361092c565b8051908161056d57005b73ffffffffffffffffffffffffffffffffffffffff92835f555f5b83811061059157005b82518110156105fc57807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6105f587602060019560051b880101511673ffffffffffffffffffffffffffffffffffffffff165f5264010000000060205260405f2090565b5501610588565b6032827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361011457565b9081518082526020808093019301915f5b82811061066a575050505090565b835173ffffffffffffffffffffffffffffffffffffffff168552938101939281019260010161065c565b73ffffffffffffffffffffffffffffffffffffffff81165f5264010000000060205260405f20908154801515908161074f575b50610749576001905f5463ffffffff8160a01c1691825f1461072a57740100000000000000000000000000000000000000007f800000000000000000000000000000000000000000000000000000000000000092015f551781555b019055600190565b74010000000000000000000000000000000000000000175f5550610722565b50505f90565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff915014155f6106c7565b73ffffffffffffffffffffffffffffffffffffffff809116805f52640100000000908160205260405f20928354937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80915584158015610923575b61091a575f549063ffffffff90818360a01c1680815f146108f25785916001146108c55790827fffffffffffffffffffffffff00000000000000000000000000000000000000009201541693015f555b83831694850361083c575b50505050505050600190565b8601925f54918260a01c1684101561089d5783156108915750507f80000000000000000000000000000000000000000000000000000000000000001790555b5f5260205260405f20555f808080808080610830565b811618175f555061087b565b7f4e23d035000000000000000000000000000000000000000000000000000000005f5260045ffd5b50909216917f80000000000000000000000000000000000000000000000000000000000000005f55610825565b7f06a2af9e000000000000000000000000000000000000000000000000000000005f5260045ffd5b50505050505f90565b508085146107d5565b5f549063ffffffff8260a01c169173ffffffffffffffffffffffffffffffffffffffff92604051936001926005918360010160051b870160405283808852610976575b5050505050565b8060209216602088015260015b848110610990575061096f565b8054821681851b89018401528501610983565b6401000000008110156109b557905f90565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffdfea26469706673582212209fde84901b39d63e7454a730ffca1a3a9ba0f4e8bd1c3d86cb3a8c362766defc64736f6c63430008190033";
const isSuperArgs = (xs) => xs.length > 1;
class AddressSetMock__factory extends ethers_1.ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    connect(runner) {
        return super.connect(runner);
    }
    static createInterface() {
        return new ethers_1.Interface(_abi);
    }
    static connect(address, runner) {
        return new ethers_1.Contract(address, _abi, runner);
    }
}
exports.AddressSetMock__factory = AddressSetMock__factory;
AddressSetMock__factory.bytecode = _bytecode;
AddressSetMock__factory.abi = _abi;
//# sourceMappingURL=AddressSetMock__factory.js.map