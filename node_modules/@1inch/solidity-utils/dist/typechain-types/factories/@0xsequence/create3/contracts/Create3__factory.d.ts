import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type { Create3, Create3Interface } from "../../../../@0xsequence/create3/contracts/Create3";
type Create3ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Create3__factory extends ContractFactory {
    constructor(...args: Create3ConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<Create3 & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): Create3__factory;
    static readonly bytecode = "0x6080806040523460175760399081601c823930815050f35b5f80fdfe5f80fdfea264697066735822122099deb8fbccc0ed640c2ccaa57f93cfb12f791290c0a8032ea47dfc8b4ece489664736f6c63430008190033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "ErrorCreatingContract";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "ErrorCreatingProxy";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "TargetAlreadyExists";
        readonly type: "error";
    }];
    static createInterface(): Create3Interface;
    static connect(address: string, runner?: ContractRunner | null): Create3;
}
export {};
